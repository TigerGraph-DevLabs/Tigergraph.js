{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TigerGraph.js: Get Started! About An open-source wrapper for TigerGraph. This library allows users to easily use TigerGraph in Node.js and (currently yet to be tested) in the browser. Install npm install tigergraph.js Usage First, have your information in a document (called config.js): const credentials = { token: \"INSERT_TOKEN_HERE\", secret: \"INSERT_SECRET_HERE\", password: \"INSERT_PASSWORD_HERE\" } module.exports = credentials; While creating your box, you will create a password which you can copy and paste above. To create a secret, go GraphStudio, then Admin --> User Management --> Create Secret, and press Create and copy the secret into the config.js file. Finally, using your secret, you can create a token. To create a connection, you'll need a token. To generate a token, run the following code: const tgjs = require(\"tigergraph.js\"); const cred = require(\"./config.js\"); tgjs.getToken(cred.secret); // A token will show on your console. Copy and paste it. From there, you can create a connection with your graph, then query it, and add and delete vertices and edges. const tgjs = require(\"tigergraph.js\"); const cred = require(\"./config.js\"); const conn = new tgjs.createTigerGraphConnection(\"DOMAIN.i.tgcloud.io\", \"MyGraph\", \"tigergraph\", cred.password, cred.secret, cred.token); Now you're ready to go! Check out the documentation or look at some example projects to get you inspired! Projects Introduction to TigerGraph.js Combining TigerGraph.js and Discord.js Creating a Recommendation App with TigerGraph.js","title":"TigerGraph.js: Get Started!"},{"location":"#tigergraphjs-get-started","text":"","title":"TigerGraph.js: Get Started!"},{"location":"#about","text":"An open-source wrapper for TigerGraph. This library allows users to easily use TigerGraph in Node.js and (currently yet to be tested) in the browser.","title":"About"},{"location":"#install","text":"npm install tigergraph.js","title":"Install"},{"location":"#usage","text":"First, have your information in a document (called config.js): const credentials = { token: \"INSERT_TOKEN_HERE\", secret: \"INSERT_SECRET_HERE\", password: \"INSERT_PASSWORD_HERE\" } module.exports = credentials; While creating your box, you will create a password which you can copy and paste above. To create a secret, go GraphStudio, then Admin --> User Management --> Create Secret, and press Create and copy the secret into the config.js file. Finally, using your secret, you can create a token. To create a connection, you'll need a token. To generate a token, run the following code: const tgjs = require(\"tigergraph.js\"); const cred = require(\"./config.js\"); tgjs.getToken(cred.secret); // A token will show on your console. Copy and paste it. From there, you can create a connection with your graph, then query it, and add and delete vertices and edges. const tgjs = require(\"tigergraph.js\"); const cred = require(\"./config.js\"); const conn = new tgjs.createTigerGraphConnection(\"DOMAIN.i.tgcloud.io\", \"MyGraph\", \"tigergraph\", cred.password, cred.secret, cred.token); Now you're ready to go! Check out the documentation or look at some example projects to get you inspired!","title":"Usage"},{"location":"#projects","text":"Introduction to TigerGraph.js Combining TigerGraph.js and Discord.js Creating a Recommendation App with TigerGraph.js","title":"Projects"},{"location":"contribute/","text":"How to Contribute If you'd like to contribute to this project: Clone the Repository Make your changes Create a pull request Await approval","title":"How to Contribute"},{"location":"contribute/#how-to-contribute","text":"If you'd like to contribute to this project: Clone the Repository Make your changes Create a pull request Await approval","title":"How to Contribute"},{"location":"license/","text":"License MIT License Copyright (c) 2020 Shreya Chaudhary Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright (c) 2020 Shreya Chaudhary Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"Main/edge/","text":"Edges Functions getEdges About Retrieves edges of a certain type from the graph. Code conn.getEdges(vertex_type, vertex_id, edge, callback); conn.getEdges(\"Vertex Type\", \"Unique_ID\", \"_\", (data) => { console.log(data); }); Parameters vertex_type Type: String Description: The type of the vertices vertex_id Type: String Description: The unqiue id of the vertex edge Type: String Description: The edge types desired Note: \"_\" will return all edges callback Type: Function Description: Function of what to do with the values given. delEdges About Echo finds the approximate time in between launches. Code conn.echo(builtin, dynamic, statistic, callback); conn.echo(true, true, true, (data) => { console.log(data); }); Parameters buildin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints. callback Type: Function Description: Function of what to do with the values given.","title":"Edges Functions"},{"location":"Main/edge/#edges-functions","text":"","title":"Edges Functions"},{"location":"Main/edge/#getedges","text":"","title":"getEdges"},{"location":"Main/edge/#about","text":"Retrieves edges of a certain type from the graph.","title":"About"},{"location":"Main/edge/#code","text":"conn.getEdges(vertex_type, vertex_id, edge, callback); conn.getEdges(\"Vertex Type\", \"Unique_ID\", \"_\", (data) => { console.log(data); });","title":"Code"},{"location":"Main/edge/#parameters","text":"vertex_type Type: String Description: The type of the vertices vertex_id Type: String Description: The unqiue id of the vertex edge Type: String Description: The edge types desired Note: \"_\" will return all edges callback Type: Function Description: Function of what to do with the values given.","title":"Parameters"},{"location":"Main/edge/#deledges","text":"","title":"delEdges"},{"location":"Main/edge/#about_1","text":"Echo finds the approximate time in between launches.","title":"About"},{"location":"Main/edge/#code_1","text":"conn.echo(builtin, dynamic, statistic, callback); conn.echo(true, true, true, (data) => { console.log(data); });","title":"Code"},{"location":"Main/edge/#parameters_1","text":"buildin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints. callback Type: Function Description: Function of what to do with the values given.","title":"Parameters"},{"location":"Main/misc/","text":"Other Functions echo About Echo finds the approximate time in between launches. Code conn.echo(builtin, dynamic, statistic, callback); conn.echo(true, true, true, (data) => { console.log(data); }); Parameters buildin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints. callback Type: Function Description: Function of what to do with the values given. statistic About Echo finds the approximate time in between launches. Code conn.echo(callback); conn.echo((data) => { console.log(data); }); Parameters Callback Function of what to do next getEndpoints About Echo finds the approximate time in between launches. Code conn.echo(builtin, dynamic, statistic, callback); conn.echo(true, true, true, (data) => { console.log(data); }); Parameters buildin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints. callback Type: Function Description: Function of what to do with the values given. version About Echo finds the approximate time in between launches. Code conn.echo(builtin, dynamic, statistic, callback); conn.echo(true, true, true, (data) => { console.log(data); }); Parameters buildin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints. callback Type: Function Description: Function of what to do with the values given.","title":"Other Functions"},{"location":"Main/misc/#other-functions","text":"","title":"Other Functions"},{"location":"Main/misc/#echo","text":"","title":"echo"},{"location":"Main/misc/#about","text":"Echo finds the approximate time in between launches.","title":"About"},{"location":"Main/misc/#code","text":"conn.echo(builtin, dynamic, statistic, callback); conn.echo(true, true, true, (data) => { console.log(data); });","title":"Code"},{"location":"Main/misc/#parameters","text":"buildin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints. callback Type: Function Description: Function of what to do with the values given.","title":"Parameters"},{"location":"Main/misc/#statistic","text":"","title":"statistic"},{"location":"Main/misc/#about_1","text":"Echo finds the approximate time in between launches.","title":"About"},{"location":"Main/misc/#code_1","text":"conn.echo(callback); conn.echo((data) => { console.log(data); });","title":"Code"},{"location":"Main/misc/#parameters_1","text":"Callback Function of what to do next","title":"Parameters"},{"location":"Main/misc/#getendpoints","text":"","title":"getEndpoints"},{"location":"Main/misc/#about_2","text":"Echo finds the approximate time in between launches.","title":"About"},{"location":"Main/misc/#code_2","text":"conn.echo(builtin, dynamic, statistic, callback); conn.echo(true, true, true, (data) => { console.log(data); });","title":"Code"},{"location":"Main/misc/#parameters_2","text":"buildin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints. callback Type: Function Description: Function of what to do with the values given.","title":"Parameters"},{"location":"Main/misc/#version","text":"","title":"version"},{"location":"Main/misc/#about_3","text":"Echo finds the approximate time in between launches.","title":"About"},{"location":"Main/misc/#code_3","text":"conn.echo(builtin, dynamic, statistic, callback); conn.echo(true, true, true, (data) => { console.log(data); });","title":"Code"},{"location":"Main/misc/#parameters_3","text":"buildin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints. callback Type: Function Description: Function of what to do with the values given.","title":"Parameters"},{"location":"Main/query/","text":"Queries Functions runQuery About Runs a query from the graph. Code conn.runQuery(query_name, parameters, callback); conn.runQuery(\"MyQuery\", {}, (data) => { console.log(data); }); Parameters query_name Type: String Description: The name of the query desired to run parameters Type: JSON Object Description: An object of {parameter_name: parameter_value} for the parameters to be passed to the query. Note: If no parameters, pass {}. callback Type: Function Description: Function of what to do with the values given. abortQuery About Shows all the queries running. Code conn.getEdges(vertex_type, vertex_id, edge, callback); conn.getVertices(\"Vertex Type\", \"Unique_ID\", \"_\", (data) => { console.log(data); }); Parameters vertex_type Type: String Description: The type of the vertices vertex_id Type: String Description: The unqiue id of the vertex edge Type: String Description: The edge types desired Note: \"_\" will return all edges callback Type: Function Description: Function of what to do with the values given. showProcessesList About Shows all the queries running. Code conn.getEdges(vertex_type, vertex_id, edge, callback); conn.getVertices(\"Vertex Type\", \"Unique_ID\", \"_\", (data) => { console.log(data); }); Parameters vertex_type Type: String Description: The type of the vertices vertex_id Type: String Description: The unqiue id of the vertex edge Type: String Description: The edge types desired Note: \"_\" will return all edges callback Type: Function Description: Function of what to do with the values given.","title":"Queries Functions"},{"location":"Main/query/#queries-functions","text":"","title":"Queries Functions"},{"location":"Main/query/#runquery","text":"","title":"runQuery"},{"location":"Main/query/#about","text":"Runs a query from the graph.","title":"About"},{"location":"Main/query/#code","text":"conn.runQuery(query_name, parameters, callback); conn.runQuery(\"MyQuery\", {}, (data) => { console.log(data); });","title":"Code"},{"location":"Main/query/#parameters","text":"query_name Type: String Description: The name of the query desired to run parameters Type: JSON Object Description: An object of {parameter_name: parameter_value} for the parameters to be passed to the query. Note: If no parameters, pass {}. callback Type: Function Description: Function of what to do with the values given.","title":"Parameters"},{"location":"Main/query/#abortquery","text":"","title":"abortQuery"},{"location":"Main/query/#about_1","text":"Shows all the queries running.","title":"About"},{"location":"Main/query/#code_1","text":"conn.getEdges(vertex_type, vertex_id, edge, callback); conn.getVertices(\"Vertex Type\", \"Unique_ID\", \"_\", (data) => { console.log(data); });","title":"Code"},{"location":"Main/query/#parameters_1","text":"vertex_type Type: String Description: The type of the vertices vertex_id Type: String Description: The unqiue id of the vertex edge Type: String Description: The edge types desired Note: \"_\" will return all edges callback Type: Function Description: Function of what to do with the values given.","title":"Parameters"},{"location":"Main/query/#showprocesseslist","text":"","title":"showProcessesList"},{"location":"Main/query/#about_2","text":"Shows all the queries running.","title":"About"},{"location":"Main/query/#code_2","text":"conn.getEdges(vertex_type, vertex_id, edge, callback); conn.getVertices(\"Vertex Type\", \"Unique_ID\", \"_\", (data) => { console.log(data); });","title":"Code"},{"location":"Main/query/#parameters_2","text":"vertex_type Type: String Description: The type of the vertices vertex_id Type: String Description: The unqiue id of the vertex edge Type: String Description: The edge types desired Note: \"_\" will return all edges callback Type: Function Description: Function of what to do with the values given.","title":"Parameters"},{"location":"Main/vertex/","text":"Vertices Functions getVertices About Retrieves vertices of a certain type from the graph. Code conn.getVertices(vertex_type, callback); conn.getVertices(\"Vertex Type\", (data) => { console.log(data); }); Parameters vertex_type Type: String Description: The type of vertex callback Type: Function Description: Function of what to do with the values given. delVertices About Echo finds the approximate time in between launches. Code conn.echo(builtin, dynamic, statistic, callback); conn.echo(true, true, true, (data) => { console.log(data); }); Parameters buildin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints. callback Type: Function Description: Function of what to do with the values given.","title":"Vertices Functions"},{"location":"Main/vertex/#vertices-functions","text":"","title":"Vertices Functions"},{"location":"Main/vertex/#getvertices","text":"","title":"getVertices"},{"location":"Main/vertex/#about","text":"Retrieves vertices of a certain type from the graph.","title":"About"},{"location":"Main/vertex/#code","text":"conn.getVertices(vertex_type, callback); conn.getVertices(\"Vertex Type\", (data) => { console.log(data); });","title":"Code"},{"location":"Main/vertex/#parameters","text":"vertex_type Type: String Description: The type of vertex callback Type: Function Description: Function of what to do with the values given.","title":"Parameters"},{"location":"Main/vertex/#delvertices","text":"","title":"delVertices"},{"location":"Main/vertex/#about_1","text":"Echo finds the approximate time in between launches.","title":"About"},{"location":"Main/vertex/#code_1","text":"conn.echo(builtin, dynamic, statistic, callback); conn.echo(true, true, true, (data) => { console.log(data); });","title":"Code"},{"location":"Main/vertex/#parameters_1","text":"buildin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints. callback Type: Function Description: Function of what to do with the values given.","title":"Parameters"}]}