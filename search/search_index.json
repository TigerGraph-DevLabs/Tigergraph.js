{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TigerGraph.js: Get Started! Note: As of 06/15/2022 (v1.0.3), all functions use promises instead of callbacks. About An open-source wrapper for TigerGraph. This library allows users to easily use TigerGraph in Node.js and (currently yet to be tested) in the browser. Install npm install tigergraph.js Usage First, have your information in a document (called config.js): const credentials = { password: \"INSERT_PASSWORD_HERE\" } module.exports = credentials; First, create a connection const tgjs = require(\"tigergraph.js\"); const cred = require(\"./config.js\"); tgjs.TigerGraphConnection(\"DOMAIN.i.tgcloud.io\", \"MyGraph\", \"tigergraph\", cred.password).then((conn) => { // Code here }); Now you're ready to go! Check out the documentation or look at some example projects to get inspired!","title":"TigerGraph.js: Get Started!"},{"location":"#tigergraphjs-get-started","text":"Note: As of 06/15/2022 (v1.0.3), all functions use promises instead of callbacks.","title":"TigerGraph.js: Get Started!"},{"location":"#about","text":"An open-source wrapper for TigerGraph. This library allows users to easily use TigerGraph in Node.js and (currently yet to be tested) in the browser.","title":"About"},{"location":"#install","text":"npm install tigergraph.js","title":"Install"},{"location":"#usage","text":"First, have your information in a document (called config.js): const credentials = { password: \"INSERT_PASSWORD_HERE\" } module.exports = credentials; First, create a connection const tgjs = require(\"tigergraph.js\"); const cred = require(\"./config.js\"); tgjs.TigerGraphConnection(\"DOMAIN.i.tgcloud.io\", \"MyGraph\", \"tigergraph\", cred.password).then((conn) => { // Code here }); Now you're ready to go! Check out the documentation or look at some example projects to get inspired!","title":"Usage"},{"location":"contribute/","text":"How to Contribute If you'd like to contribute to this project: Clone the Repository Make your changes Create a pull request Await approval","title":"How to Contribute"},{"location":"contribute/#how-to-contribute","text":"If you'd like to contribute to this project: Clone the Repository Make your changes Create a pull request Await approval","title":"How to Contribute"},{"location":"license/","text":"License MIT License Copyright (c) 2020 Shreya Chaudhary Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright (c) 2020 Shreya Chaudhary Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"Main/edge/","text":"Edges Functions getEdges About Retrieves edges of a certain type from a certain vertex from the graph Code conn.getEdges(sourceVertexType, sourceVertexId, edgeType); conn.getEdges(\"Doc\", \"Doc1\", \"LINKS_TO\").then((data) => console.log(data)); Parameters sourceVertexType Type: String Description: The type of the vertices the edges will be attached to. sourceVertexId Type: Any Description: The unique id of the vertex the edges must be attached to edgeType Type: String Description: The edge type desired upsertEdge About Adds a new edge to your graph Code conn.upsertEdge(sourceVertexType, source_vertex_id, edge_name, target_vertex_name, target_vertex_id, attributes) conn.upsertEdge(\"Doc\", \"Doc1\", \"LINKS_TO\", \"Doc\", \"Doc2\", {weight: 5.0}).then((data) => console.log(data)); Parameters sourceVertexType Type: String Description: Type of source vertex. source_vertex_id Type: Any Description: ID of source vertex. edge_name Type: String Description: Type of edge to upsert. target_vertex_name Type: String Description: Type of target vertex. target_vertex_id Type: Any Description: ID of target vertex. attributes Type: JSON Object Description: Map of all the attributes of the edge.","title":"Edges Functions"},{"location":"Main/edge/#edges-functions","text":"","title":"Edges Functions"},{"location":"Main/edge/#getedges","text":"","title":"getEdges"},{"location":"Main/edge/#about","text":"Retrieves edges of a certain type from a certain vertex from the graph","title":"About"},{"location":"Main/edge/#code","text":"conn.getEdges(sourceVertexType, sourceVertexId, edgeType); conn.getEdges(\"Doc\", \"Doc1\", \"LINKS_TO\").then((data) => console.log(data));","title":"Code"},{"location":"Main/edge/#parameters","text":"sourceVertexType Type: String Description: The type of the vertices the edges will be attached to. sourceVertexId Type: Any Description: The unique id of the vertex the edges must be attached to edgeType Type: String Description: The edge type desired","title":"Parameters"},{"location":"Main/edge/#upsertedge","text":"","title":"upsertEdge"},{"location":"Main/edge/#about_1","text":"Adds a new edge to your graph","title":"About"},{"location":"Main/edge/#code_1","text":"conn.upsertEdge(sourceVertexType, source_vertex_id, edge_name, target_vertex_name, target_vertex_id, attributes) conn.upsertEdge(\"Doc\", \"Doc1\", \"LINKS_TO\", \"Doc\", \"Doc2\", {weight: 5.0}).then((data) => console.log(data));","title":"Code"},{"location":"Main/edge/#parameters_1","text":"sourceVertexType Type: String Description: Type of source vertex. source_vertex_id Type: Any Description: ID of source vertex. edge_name Type: String Description: Type of edge to upsert. target_vertex_name Type: String Description: Type of target vertex. target_vertex_id Type: Any Description: ID of target vertex. attributes Type: JSON Object Description: Map of all the attributes of the edge.","title":"Parameters"},{"location":"Main/misc/","text":"Other Functions echo About Test the connection with echo() which will return \"Hello GSQL\" Code conn.echo(); conn.echo().then((data) => console.log(data)); Parameters None getEndpoints About Returns the endpoints of the graph Code conn.getEndpoints(builtin, dynamic, static); conn.getEndpoints(true, true, true).then((data) => console.log(data)); Parameters builtin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints. version About Returns the version. Code conn.getVersion(); conn.getVersion().then((data) => console.log(data)); Parameters None","title":"Other Functions"},{"location":"Main/misc/#other-functions","text":"","title":"Other Functions"},{"location":"Main/misc/#echo","text":"","title":"echo"},{"location":"Main/misc/#about","text":"Test the connection with echo() which will return \"Hello GSQL\"","title":"About"},{"location":"Main/misc/#code","text":"conn.echo(); conn.echo().then((data) => console.log(data));","title":"Code"},{"location":"Main/misc/#parameters","text":"None","title":"Parameters"},{"location":"Main/misc/#getendpoints","text":"","title":"getEndpoints"},{"location":"Main/misc/#about_1","text":"Returns the endpoints of the graph","title":"About"},{"location":"Main/misc/#code_1","text":"conn.getEndpoints(builtin, dynamic, static); conn.getEndpoints(true, true, true).then((data) => console.log(data));","title":"Code"},{"location":"Main/misc/#parameters_1","text":"builtin Type: Boolean Description: Checks for endpoints preinstalled in the TigerGraph system. dynamic Type: Boolean Description: Checks for endpoints generated when compiling GSQL queries. static Type: Boolean Description: Checks for user-installed endpoints.","title":"Parameters"},{"location":"Main/misc/#version","text":"","title":"version"},{"location":"Main/misc/#about_2","text":"Returns the version.","title":"About"},{"location":"Main/misc/#code_2","text":"conn.getVersion(); conn.getVersion().then((data) => console.log(data));","title":"Code"},{"location":"Main/misc/#parameters_2","text":"None","title":"Parameters"},{"location":"Main/query/","text":"Queries Functions runQuery About Runs a query from the graph. Code conn.runQuery(queryname, params); conn.runQuery(\"MyQuery\", {param: \"parameter\"}).then((data) => console.log(data)); Parameters queryname Type: String Description: The name of the query desired to run params Type: JSON Object Description: An object of {parameter_name: parameter_value} for the parameters to be passed to the query. Note: If no parameters, pass {}. abortQuery About Aborts a query. Code conn.getEdges(vertex_type, vertex_id, edge); conn.getVertices(\"Vertex Type\", \"Unique_ID\", \"_\").then((data) => console.log(data)); Parameters requestid Type: Array Description: IDs of queries to abort Note: To abort all, use [\"all\"] showProcessesList About Shows all the queries running. Code conn.showProcessesList(); conn.showProcessesList().then((data) => console.log(data)); Parameters None","title":"Queries Functions"},{"location":"Main/query/#queries-functions","text":"","title":"Queries Functions"},{"location":"Main/query/#runquery","text":"","title":"runQuery"},{"location":"Main/query/#about","text":"Runs a query from the graph.","title":"About"},{"location":"Main/query/#code","text":"conn.runQuery(queryname, params); conn.runQuery(\"MyQuery\", {param: \"parameter\"}).then((data) => console.log(data));","title":"Code"},{"location":"Main/query/#parameters","text":"queryname Type: String Description: The name of the query desired to run params Type: JSON Object Description: An object of {parameter_name: parameter_value} for the parameters to be passed to the query. Note: If no parameters, pass {}.","title":"Parameters"},{"location":"Main/query/#abortquery","text":"","title":"abortQuery"},{"location":"Main/query/#about_1","text":"Aborts a query.","title":"About"},{"location":"Main/query/#code_1","text":"conn.getEdges(vertex_type, vertex_id, edge); conn.getVertices(\"Vertex Type\", \"Unique_ID\", \"_\").then((data) => console.log(data));","title":"Code"},{"location":"Main/query/#parameters_1","text":"requestid Type: Array Description: IDs of queries to abort Note: To abort all, use [\"all\"]","title":"Parameters"},{"location":"Main/query/#showprocesseslist","text":"","title":"showProcessesList"},{"location":"Main/query/#about_2","text":"Shows all the queries running.","title":"About"},{"location":"Main/query/#code_2","text":"conn.showProcessesList(); conn.showProcessesList().then((data) => console.log(data));","title":"Code"},{"location":"Main/query/#parameters_2","text":"None","title":"Parameters"},{"location":"Main/vertex/","text":"Vertices Functions getVertexType About Retrieves vertices of a certain type from the graph. Code conn.getVertexType(vertexType); conn.getVertexType(\"Vertex Type\").then((data) => console.log(data)); Parameters vertexType Type: String Description: The type of vertex upsertVertex About Upserts a new vertex to the graph. Code upsertVertex(vertexType, vertexId, attributes); upsertVertex(\"Vertex_Type\", \"Vertex_ID\", {attr: \"sample_attr\"}).then((data) => console.log(data)); Parameters vertexType Type: String Description: Vertex type to upsert. vertexId Type: Any Description: ID of vertex to upsert. attributes Type: JSON Object Description: Map of attribute names to attribute values.","title":"Vertices Functions"},{"location":"Main/vertex/#vertices-functions","text":"","title":"Vertices Functions"},{"location":"Main/vertex/#getvertextype","text":"","title":"getVertexType"},{"location":"Main/vertex/#about","text":"Retrieves vertices of a certain type from the graph.","title":"About"},{"location":"Main/vertex/#code","text":"conn.getVertexType(vertexType); conn.getVertexType(\"Vertex Type\").then((data) => console.log(data));","title":"Code"},{"location":"Main/vertex/#parameters","text":"vertexType Type: String Description: The type of vertex","title":"Parameters"},{"location":"Main/vertex/#upsertvertex","text":"","title":"upsertVertex"},{"location":"Main/vertex/#about_1","text":"Upserts a new vertex to the graph.","title":"About"},{"location":"Main/vertex/#code_1","text":"upsertVertex(vertexType, vertexId, attributes); upsertVertex(\"Vertex_Type\", \"Vertex_ID\", {attr: \"sample_attr\"}).then((data) => console.log(data));","title":"Code"},{"location":"Main/vertex/#parameters_1","text":"vertexType Type: String Description: Vertex type to upsert. vertexId Type: Any Description: ID of vertex to upsert. attributes Type: JSON Object Description: Map of attribute names to attribute values.","title":"Parameters"}]}